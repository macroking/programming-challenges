                    Hashing

1. Balanced binary search tree      O(log n)
2. Direct access table              O(1)

Index Mapping or Trivial Hashing:
    Given a limited range array contains both positive and non positive numbers, i.e., elements are in range from -MAX to +MAX. Our task is to search if some number is present in the array or not in O(1) time.

Collision
    Since a hash function gets us a small number for a key which is a big integer or string, there is possibility that two keys result in same value

Collision Handling:
    1. Seperate Chaining:
        The idea is to make each cell of hash table point to a linked list of records that have same hash function value

    Performance:
    m = Number of slots in hash table
    n = Number of keys to be inserted in hash table

    Load factor α = n/m
    Expected time to search = O(1 + α)
    Expected time to insert/delete = O(1 + α)
    Time complexity of search insert and delete is
    O(1) if  α is O(1)

    2. Open Addressing:
         In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table.

    Performance:
        m = Number of slots in the hash table
        n = Number of keys to be inserted in the hash table

        Load factor α = n/m  ( < 1 )

        Expected time to search/insert/delete < 1/(1 - α)

        So Search, Insert and Delete take (1/(1 - α)) time

    a) Linear Probing:
         In linear probing, we linearly probe for next slot. For example, typical gap between two probes is 1

         !!Clustering: The main problem with linear probing is clustering, many consecutive elements form groups and it starts taking time to find a free slot or to search an element.

    b) Quadratic Probing:
        We look for i2‘th slot in i’th iteration.

    c) Double Hashing:
        We use another hash function hash2(x) and look for i*hash2(x) slot in i’th rotation.

Comparison of above three:
Linear probing has the best cache performance but suffers from clustering. One more advantage of Linear probing is easy to compute.

Quadratic probing lies between the two in terms of cache performance and clustering.

Double hashing has poor cache performance but no clustering. Double hashing requires more computation time as two hash functions need to be computed.



S.No.	Seperate Chaining	Open Addressing
1.	Chaining is Simpler to implement.	Open Addressing requires more computation.
2.	In chaining, Hash table never fills up, we can always add more elements to chain.	In open addressing, table may become full.
3.	Chaining is Less sensitive to the hash function or load factors.	Open addressing requires extra care for to avoid clustering and load factor.
4.	Chaining is mostly used when it is unknown how many and how frequently keys may be inserted or deleted.	Open addressing is used when the frequency and number of keys is known.
5.	Cache performance of chaining is not good as keys are stored using linked list.	Open addressing provides better cache performance as everything is stored in the same table.
6.	Wastage of Space (Some Parts of hash table in chaining are never used).	In Open addressing, a slot can be used even if an input doesn’t map to it.
7.	Chaining uses extra space for links.	No links in Open addressing

